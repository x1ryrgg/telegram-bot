from typing import Union
import jwt
from time import time
from functools import wraps
from dateutil.parser import parse

from aiogram.types import Message, ReplyKeyboardRemove, CallbackQuery
from datetime import datetime
from api import refresh_access_token
from cache import save_tokens_redis, get_tokens_redis, delete_tokens_redis
import logging

logger = logging.getLogger(__name__)


def auth_required(func):
    @wraps(func)
    async def wrapper(message: Message, *args, **kwargs):
        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω—ã –∏–∑ Redis
        tg_id = message.from_user.id
        tokens = await get_tokens_redis(tg_id)

        if not tokens:
            await message.answer("‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è! /start",
                                 reply_markup=ReplyKeyboardRemove())
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è access_token
        try:
            decoded = jwt.decode(tokens["access"], options={"verify_signature": False})
            if decoded.get("exp", 0) < time():
                # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω, –µ—Å–ª–∏ –∏—Å—Ç–µ–∫
                new_tokens = await refresh_access_token(tokens["refresh"])
                if new_tokens:
                    await save_tokens_redis(tg_id, {
                        'access': new_tokens["access"],
                        'refresh': tokens["refresh"]
                    })
                    return await func(message, new_tokens["access"], *args, **kwargs)
                else:
                    await message.answer("‚ùå –°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞. –ê–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å —Å–Ω–æ–≤–∞ /start")
                    return
        except jwt.DecodeError:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ —Ç–æ–∫–µ–Ω–∞. –ê–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å —Å–Ω–æ–≤–∞ /start")
            return

        # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å —Å —Ç–µ–∫—É—â–∏–º —Ç–æ–∫–µ–Ω–æ–º
        return await func(message, tokens["access"], *args, **kwargs)

    return wrapper


def format_profile(profile):
    return [
        f"üë§ <b>–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å</b>\n",
        f"üîπ <b>–õ–æ–≥–∏–Ω:</b> <code>{profile['username']}</code>",
        f"üìß <b>Email:</b> {profile['email']}",
        f"‚úñÔ∏è <b>–ò–º—è:</b> {profile['first_name'] or '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}",
        f"‚úñÔ∏è <b>–§–∞–º–∏–ª–∏—è:</b> {profile['last_name'] or '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}",
        f"üéì <b>–†–æ–ª—å:</b> {'–ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å' if profile['role'] == 'teacher' else '—Å—Ç—É–¥–µ–Ω—Ç'}"
    ]


def format_event(event):
    try:
        # –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –¥–∞—Ç—ã —Å timezone
        event_date = parse(event['event_date'])
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥ —Å —É—á–µ—Ç–æ–º —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞
        formatted_date = event_date.strftime("%d.%m.%Y –≤ %H:%M")
    except (ValueError, KeyError) as e:
        formatted_date = "–¥–∞—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞"

    caption = (
        f"üéØ <b>{event.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}</b>\n\n"
        f"‚è≥ <i>–î–∞—Ç–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è:</i> <b>{formatted_date}</b>\n"
        f"üèõ <i>–ì—Ä—É–ø–ø–∞:</i> {event.get('group', {}).get('name', '–Ω–µ —É–∫–∞–∑–∞–Ω–∞')}\n"
        f"üë§ <i>–û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä:</i> {event['author']['username']}\n"
        f"üìù <i>–û–ø–∏—Å–∞–Ω–∏–µ:</i> {event.get('description', '–Ω–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è')}\n"
        f"üë• <i>–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤:</i> {event.get('attendees', '–ø–æ–∫–∞ –Ω–µ—Ç')}\n"
        f"üîñ <i>–¢–∏–ø:</i> {event.get('type', '–Ω–µ —É–∫–∞–∑–∞–Ω').capitalize()}"
    )

    photo_url = event.get('first_photo', {}).get('photo') if event.get('first_photo') else None

    return {
        'caption': caption,
        'photo_url': photo_url
    }

