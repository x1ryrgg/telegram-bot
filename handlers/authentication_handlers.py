from aiogram import Bot, Dispatcher, F, Router
from aiogram.types import Message, ReplyKeyboardRemove, CallbackQuery, URLInputFile
from aiogram.utils import markdown
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.enums import ParseMode
from api import get_profile, check_user_role, get_groups_list, post_event, get_events
from config import auth_required, format_profile, format_event
from handlers.login_handlers import dp_router
from keyboards import main_keyboard, get_location_keyboard, type_keyboard, get_date_keyboard
from datetime import datetime


auth_router = Router()

class EventState(StatesGroup):
    title = State() # –ø—Ä–æ—Å—Ç–æ string
    location = State() # –ø—Ä–æ—Å—Ç–æ string
    type = State() # –±—É–¥–µ—Ç inline_keyboard —Å –≤—ã–±–æ—Ä–æ–º —Ç–∏–ø–∞
    group = State()  # –±—É–¥—É—Ç –≤—ã–≤–æ–¥–∏—Ç—å—Å—è –≤—Å–µ –≥—Ä—É–ø–ø—ã —Å id - name –∏ –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –≤–≤–µ—Å—Ç—å id
    event_date = State() # –¥–∞—Ç–∞ –±—É–¥–µ—Ç –ø–æ —Ç–∏–ø—É 2025-06-19 12:30
    # photos = State()
    # videos = State()


@auth_router.message(F.text == '–ü—Ä–æ—Ñ–∏–ª—å')
@auth_required
async def check_profile(message: Message, access_token: str):
    profile = await get_profile(access_token)

    response = format_profile(profile)

    response = "\n".join(response)
    await message.answer(response, parse_mode="HTML", reply_markup=main_keyboard())


@auth_router.message(F.text == '–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è')
@auth_required
async def check_profile(message: Message, access_token: str):
    events = await get_events(access_token)

    if not events:
        await message.answer("üì≠ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –ø–æ–∫–∞ —á—Ç–æ –Ω–µ—Ç. ", reply_markup=main_keyboard())
        return

    for event in events:
        event_data = format_event(event)

        if event_data['photo_url']:
            # –ï—Å–ª–∏ –µ—Å—Ç—å —Ñ–æ—Ç–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ —Å –ø–æ–¥–ø–∏—Å—å—é
            photo = URLInputFile(event_data['photo_url'])
            await message.answer_photo(
                photo=photo,
                caption=event_data['caption'],
                parse_mode="HTML",
                reply_markup=main_keyboard()
            )
        else:
            await message.answer(
                event_data['caption'],
                parse_mode="HTML",
                reply_markup=main_keyboard()
            )

    for part in [event_data[i:i + 4000] for i in range(0, len(event_data), 4000)]:
        await message.answer(part, parse_mode=ParseMode.HTML, reply_markup=main_keyboard())

@auth_router.message(F.text == '–°–æ–∑–¥–∞—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ')
@auth_required
async def start_create_event(message: Message, access_token: str, state: FSMContext):
    user = await check_user_role(access_token, message.from_user.id)

    if user.get('role') != 'teacher':
        await message.answer('‚ùå –¢–æ–ª—å–∫–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ.')
        return

    await message.answer("–°–æ–∑–¥–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è. –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:")
    await state.set_state(EventState.title)


@auth_router.message(EventState.title)
@auth_required
async def process_title(message: Message, access_token: str, state: FSMContext):
    await state.update_data(title=message.text)
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –º–µ—Å—Ç–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –≤ —Å–ø–∏—Å–∫–µ:",
        reply_markup=get_location_keyboard()
    )
    await state.set_state(EventState.location)


@auth_router.callback_query(lambda c: c.data.startswith('location_'), EventState.location)
@auth_required
async def process_location_callback(callback: CallbackQuery, access_token: str, state: FSMContext):
    address_map = {
        "location_20_oktyabrya": "—É–ª. 20-–ª–µ—Ç–∏—è –û–∫—Ç—è–±—Ä—è, 84",
        "location_plehanovskaya": "—É–ª. –ü–ª–µ—Ö–∞–Ω–æ–≤—Å–∫–∞—è, 11",
        "location_moskovskiy": "–ú–æ—Å–∫–æ–≤—Å–∫–∏–π –ø—Ä–æ—Å–ø–µ–∫—Ç, 179"
    }

    selected_address = address_map[callback.data]
    await state.update_data(location=selected_address)
    await callback.message.answer(f"–í—ã–±—Ä–∞–Ω–æ –º–µ—Å—Ç–æ: {selected_address}")
    await callback.answer()

    # –ü–µ—Ä–µ—Ö–æ–¥ –∫ –≤—ã–±–æ—Ä—É —Ç–∏–ø–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:", reply_markup=type_keyboard())
    await state.set_state(EventState.type)


@auth_router.message(EventState.location)
@auth_required
async def process_location(message: Message, access_token: str, state: FSMContext):
    if message.text.startswith('/'):
        return

    await state.update_data(location=message.text)
    await message.answer(f"–ú–µ—Å—Ç–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è: {message.text}")

    # –ü–µ—Ä–µ—Ö–æ–¥ –∫ –≤—ã–±–æ—Ä—É —Ç–∏–ø–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:", reply_markup=type_keyboard())
    await state.set_state(EventState.type)


@auth_router.callback_query(lambda c: c.data.startswith('type_'), EventState.type)
@auth_required
async def process_type_callback(callback: CallbackQuery, access_token: str, state: FSMContext):
    types_map = {
        "type_conference": "–∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—è",
        "type_contest": "–∫–æ–Ω–∫—É—Ä—Å",
        "type_excursion": "—ç–∫—Å–∫—É—Ä—Å–∏—è",
        "type_seminar": "—Å–µ–º–∏–Ω–∞—Ä"
    }

    selected_type = types_map[callback.data]
    await state.update_data(type=selected_type)
    await callback.message.answer(f"–í—ã–±—Ä–∞–Ω —Ç–∏–ø –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è: {selected_type}")
    await callback.answer()

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø
    groups = await get_groups_list(access_token)
    if not groups:
        await callback.message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        await state.clear()
        return

    groups_text = "\n".join([f"ID: <b>{g['id']}</b> | –ù–∞–∑–≤–∞–Ω–∏–µ: <b>{g['name']}</b>" for g in groups])
    await callback.message.answer(f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –≥—Ä—É–ø–ø—ã:\n{groups_text}\n\n–í–≤–µ–¥–∏—Ç–µ ID –Ω—É–∂–Ω–æ–π –≥—Ä—É–ø–ø—ã:", parse_mode="HTML")
    await state.set_state(EventState.group)


@auth_router.message(EventState.group)
@auth_required
async def process_group(message: Message, access_token: str, state: FSMContext):
    try:
        group_id = int(message.text)
        await state.update_data(group=group_id)

        await message.answer(
            "üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –≤—Ä—É—á–Ω—É—é:\n"
            "–§–æ—Ä–º–∞—Ç: <b>–ì–ì–ì–ì-–ú–ú-–î–î –ß–ß:–ú–ú</b>\n"
            "–ü—Ä–∏–º–µ—Ä: <code>2025-06-19 14:30</code>",
            reply_markup=get_date_keyboard(),
            parse_mode="HTML"
        )
        await state.set_state(EventState.event_date)
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –≥—Ä—É–ø–ø—ã (—á–∏—Å–ª–æ):")


@auth_router.callback_query(lambda c: c.data.startswith('date_'), EventState.event_date)
@auth_required
async def process_date_callback(callback: CallbackQuery, access_token: str, state: FSMContext):
    date_str = callback.data[5:]  # –£–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å 'date_'
    try:
        await state.update_data(event_date=date_str)
        await callback.message.edit_text(f"–í—ã–±—Ä–∞–Ω–∞ –¥–∞—Ç–∞: {date_str}")
        await complete_event_creation(callback.message, access_token, state)
    except ValueError:
        await callback.answer("–û—à–∏–±–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–∞—Ç—ã")


@auth_router.message(EventState.event_date)
@auth_required
async def process_event_date(message: Message, access_token: str, state: FSMContext):
    date_str = message.text.strip()

    try:
        datetime.strptime(date_str, "%Y-%m-%d %H:%M")

        event_date = datetime.strptime(date_str, "%Y-%m-%d %H:%M")
        if event_date < datetime.now():
            await message.answer(
                "‚ùå –î–∞—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –ø—Ä–æ—à–ª–æ–º!\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –±—É–¥—É—â—É—é –¥–∞—Ç—É:",
                reply_markup=get_date_keyboard()
            )
            return

        # –ï—Å–ª–∏ –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã
        await state.update_data(event_date=date_str)
        await message.answer(f"–í—ã–±—Ä–∞–Ω–∞ –¥–∞—Ç–∞: {date_str}")
        await complete_event_creation(message, access_token, state)

    except ValueError:
        # –ï—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π –∏–ª–∏ –¥–∞—Ç–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, 31 —Ñ–µ–≤—Ä–∞–ª—è)
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∏–ª–∏ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞—è –¥–∞—Ç–∞!\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
            "<b>–ì–ì–ì–ì-–ú–ú-–î–î –ß–ß:–ú–ú</b> (–Ω–∞–ø—Ä–∏–º–µ—Ä: 2025-06-19 14:30)\n\n"
            "–ò–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:",
            reply_markup=get_date_keyboard(),
            parse_mode="HTML"
        )

async def complete_event_creation(message: Message, access_token: str, state: FSMContext):
    """–û–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è"""
    data = await state.get_data()

    try:
        event_data = {
            "title": data['title'],
            "location": data['location'],
            "type": data['type'],
            "group": data['group'],
            "event_date": data['event_date'],
            "creator_telegram_id": message.from_user.id
        }

        await post_event(access_token, event_data)

        await message.answer(
            "‚úÖ <b>–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ</b>\n\n"
            "üìå <b>–ù–∞ —Å–∞–π—Ç–µ –≤—ã —Å–º–æ–∂–µ—Ç–µ —É–ª—É—á—à–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ:</b>\n"
            "‚Ä¢ –î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ\n"
            "‚Ä¢ –ó–∞–≥—Ä—É–∑–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã (—Ñ–æ—Ç–æ, –¥–æ–∫—É–º–µ–Ω—Ç—ã)\n"
            "‚Ä¢ –ò–∑–º–µ–Ω–∏—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ \n\n",
            parse_mode="HTML", reply_markup=main_keyboard()
        )

        await state.clear()
    except Exception as e:
        await message.answer("‚ö† –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è")



